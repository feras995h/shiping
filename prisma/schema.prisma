// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ====== نماذج الحسابات العامة (GL) لدليل الحسابات ======
enum RootAccountType {
  ASSET
  EXPENSE
  LIABILITY
  EQUITY
  REVENUE
}

enum AccountNature {
  DEBIT
  CREDIT
}

model GlAccount {
  id           String         @id @default(cuid())
  name         String
  code         String         @unique // مثل: 1.2.3.4
  level        Int            @default(1)
  parentId     String?
  parent       GlAccount?     @relation("GlAccountToChildren", fields: [parentId], references: [id], onDelete: Restrict)
  children     GlAccount[]    @relation("GlAccountToChildren")
  rootType     RootAccountType
  nature       AccountNature
  natureOverride Boolean      @default(false)
  currencyId   String
  currency     Currency       @relation(fields: [currencyId], references: [id])
  isActive     Boolean        @default(true)
  isSystem     Boolean        @default(false)
  slug         String?        @unique // مرجع داخلي للحسابات المعيارية (مثل الدائنون-موظفون)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt

  // العلاقات
  journalEntryLines JournalEntryLine[]

  @@index([parentId])
  @@map("gl_accounts")
}

// نماذج القيود المحاسبية
enum JournalEntryType {
  INVOICE
  PAYMENT
  RECEIPT
  TRANSFER
  EXPENSE
  MANUAL
  PAYROLL
  ADJUSTMENT
}

model JournalEntry {
  id          String           @id @default(cuid())
  date        DateTime
  reference   String?          // رقم المرجع مثل INV-001
  description String?          // وصف القيد
  amount      Decimal          @db.Decimal(15, 2) // المبلغ الإجمالي
  type        JournalEntryType
  relatedId   String?          // مرجع للفاتورة أو المعاملة المرتبطة
  isPosted    Boolean          @default(true) // هل تم ترحيل القيد
  createdBy   String?          // المستخدم الذي أنشأ القيد
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  // العلاقات
  entries     JournalEntryLine[]
  creator     User?            @relation(fields: [createdBy], references: [id])

  @@index([date])
  @@index([type])
  @@index([relatedId])
  @@map("journal_entries")
}

model JournalEntryLine {
  id              String        @id @default(cuid())
  journalEntryId  String
  accountId       String
  debit          Decimal       @default(0) @db.Decimal(15, 2)
  credit         Decimal       @default(0) @db.Decimal(15, 2)
  description    String?       // وصف السطر
  createdAt      DateTime      @default(now())

  // العلاقات
  journalEntry   JournalEntry  @relation(fields: [journalEntryId], references: [id], onDelete: Cascade)
  account        GlAccount     @relation(fields: [accountId], references: [id])

  @@index([journalEntryId])
  @@index([accountId])
  @@map("journal_entry_lines")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  password      String
  role          UserRole  @default(USER)
  avatar        String?
  phone         String?
  address       String?
  isActive      Boolean   @default(true)
  emailVerified DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  shipments     Shipment[]
  invoices      Invoice[]
  payments      Payment[]
  clients       Client[]
  suppliers     Supplier[]
  employees     Employee[]
  purchaseOrders PurchaseOrder[]
  fixedAssets   FixedAsset[]

  // Relations for new models
  tasks         Task[]
  taskCreator   Task[]        @relation("TaskCreator")
  projects      Project[]
  customs       Customs[]
  warehouses    Warehouse[]
  inventory     Inventory[]
  vehicles      Vehicle[]
  equipment     Equipment[]
  tickets       Ticket[]      @relation("TicketCreator")
  ticketAssignee Ticket[]     @relation("TicketAssignee")
  messagesFrom  Message[]     @relation("MessageFrom")
  messagesTo    Message[]     @relation("MessageTo")
  contacts      Contact[]
  settlements   Settlement[]
  discounts     Discount[]
  evaluations   Evaluation[]  @relation("EvaluationCreator")
  evaluationEvaluator Evaluation[] @relation("EvaluationEvaluator")
  goals         Goal[]
  systemSettings SystemSettings[]
  securityLogs  SecurityLog[]
  alerts        Alert[]
  reports       Report[]
  journalEntries JournalEntry[]

  // Relations for audit and approvals
  auditLogs     AuditLog[]
  approvalRequests ApprovalRequest[]
  approvalActions ApprovalAction[]
  integrations  Integration[]

  // Relations for roles and permissions
  roles         Role[]
  rolePermissions RolePermission[]

  sessions      Session[]
  accounts      Account[]
  advertisements    Advertisement[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Client {
  id          String   @id @default(cuid())
  name        String
  email       String   @unique
  phone       String?
  address     String?
  company     String?
  taxNumber   String?
  creditLimit Decimal? @db.Decimal(10, 2)
  balance     Decimal  @default(0) @db.Decimal(10, 2)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String
  user        User     @relation(fields: [createdBy], references: [id])

  // Relations
  shipments   Shipment[]
  invoices    Invoice[]
  payments    Payment[]
  settlements Settlement[]
  discounts   Discount[]

  @@map("clients")
}

model Supplier {
  id          String   @id @default(cuid())
  name        String
  email       String   @unique
  phone       String?
  address     String?
  company     String?
  taxNumber   String?
  creditLimit Decimal? @db.Decimal(10, 2)
  balance     Decimal  @default(0) @db.Decimal(10, 2)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String
  user        User     @relation(fields: [createdBy], references: [id])

  // Relations
  purchaseOrders PurchaseOrder[]
  invoices       Invoice[]
  payments       Payment[]

  @@map("suppliers")
}

model Employee {
  id        String      @id @default(cuid())
  name      String
  email     String      @unique
  phone     String?
  position  String?
  salary    Decimal?    @db.Decimal(10, 2)
  hireDate  DateTime?
  isActive  Boolean     @default(true)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  createdBy String
  user      User        @relation(fields: [createdBy], references: [id])

  // Relations
  shipments Shipment[]
  evaluations Evaluation[]
  goals      Goal[]

  @@map("employees")
}

model Shipment {
  id              String        @id @default(cuid())
  trackingNumber  String        @unique
  clientId        String
  employeeId      String?
  origin          String
  destination     String
  weight          Decimal       @db.Decimal(10, 2)
  dimensions      String?
  description     String?
  status          ShipmentStatus @default(PENDING)
  shippingDate    DateTime?
  deliveryDate    DateTime?
  cost            Decimal       @db.Decimal(10, 2)
  price           Decimal       @db.Decimal(10, 2)
  amountPaid      Decimal       @default(0) @db.Decimal(10, 2)
  profit          Decimal       @db.Decimal(10, 2)
  currencyId      String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  createdBy       String
  user            User          @relation(fields: [createdBy], references: [id])
  client          Client        @relation(fields: [clientId], references: [id])
  employee        Employee?     @relation(fields: [employeeId], references: [id])
  currency        Currency      @relation(fields: [currencyId], references: [id])

  // Relations
  invoices Invoice[]
  customs   Customs[]

  @@map("shipments")
}

model Invoice {
  id          String        @id @default(cuid())
  invoiceNumber String      @unique
  clientId    String?
  supplierId  String?
  shipmentId  String?
  amount      Decimal       @db.Decimal(10, 2)
  tax         Decimal       @default(0) @db.Decimal(10, 2)
  total       Decimal       @db.Decimal(10, 2)
  status      InvoiceStatus @default(PENDING)
  dueDate     DateTime?
  issuedDate  DateTime?
  paidDate    DateTime?
  notes       String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  createdBy   String
  user        User          @relation(fields: [createdBy], references: [id])
  client      Client?       @relation(fields: [clientId], references: [id])
  supplier    Supplier?     @relation(fields: [supplierId], references: [id])
  shipment    Shipment?     @relation(fields: [shipmentId], references: [id])

  // Relations
  payments Payment[]

  @@map("invoices")
}

model Payment {
  id          String        @id @default(cuid())
  invoiceId   String?
  clientId    String?
  supplierId  String?
  amount      Decimal       @db.Decimal(10, 2)
  method      PaymentMethod
  reference   String?
  status      PaymentStatus @default(PENDING)
  paymentDate DateTime?
  notes       String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  createdBy   String
  user        User          @relation(fields: [createdBy], references: [id])
  invoice     Invoice?      @relation(fields: [invoiceId], references: [id])
  client      Client?       @relation(fields: [clientId], references: [id])
  supplier    Supplier?     @relation(fields: [supplierId], references: [id])

  @@map("payments")
}

model PurchaseOrder {
  id          String            @id @default(cuid())
  orderNumber String            @unique
  supplierId  String
  amount      Decimal           @db.Decimal(10, 2)
  status      PurchaseOrderStatus @default(PENDING)
  orderDate   DateTime?
  deliveryDate DateTime?
  notes       String?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  createdBy   String
  user        User              @relation(fields: [createdBy], references: [id])
  supplier    Supplier          @relation(fields: [supplierId], references: [id])

  @@map("purchase_orders")
}

model FixedAsset {
  id          String   @id @default(cuid())
  name        String
  description String?
  category    String
  purchaseDate DateTime
  cost        Decimal  @db.Decimal(10, 2)
  currentValue Decimal @db.Decimal(10, 2)
  depreciationRate Decimal @default(0) @db.Decimal(5, 2)
  location    String?
  status      AssetStatus @default(ACTIVE)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String
  user        User     @relation(fields: [createdBy], references: [id])

  @@map("fixed_assets")
}

model Currency {
  id       String   @id @default(cuid())
  code     String   @unique
  name     String
  symbol   String
  rate     Decimal  @db.Decimal(10, 6)
  isActive Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  glAccounts GlAccount[]
  shipments Shipment[]

  @@map("currencies")
}

// ===== النماذج الجديدة للوظائف الناقصة =====

// إدارة المهام للموظفين
model Task {
  id          String      @id @default(cuid())
  title       String
  description String?
  status      TaskStatus  @default(PENDING)
  priority    Priority    @default(MEDIUM)
  dueDate     DateTime?
  completedAt DateTime?
  assignedTo  String
  createdBy   String
  projectId   String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relations
  user        User        @relation(fields: [assignedTo], references: [id])
  creator     User        @relation("TaskCreator", fields: [createdBy], references: [id])
  project     Project?    @relation(fields: [projectId], references: [id])

  @@map("tasks")
}

// إدارة المشاريع
model Project {
  id          String        @id @default(cuid())
  name        String
  description String?
  status      ProjectStatus @default(ACTIVE)
  startDate   DateTime?
  endDate     DateTime?
  budget      Decimal?      @db.Decimal(10, 2)
  createdBy   String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relations
  user        User          @relation(fields: [createdBy], references: [id])
  tasks       Task[]

  @@map("projects")
}

// إدارة التخليص الجمركي
model Customs {
  id              String        @id @default(cuid())
  shipmentId      String
  customsNumber   String        @unique
  status          CustomsStatus @default(PENDING)
  documents       String?
  fees            Decimal       @db.Decimal(10, 2)
  clearanceDate   DateTime?
  notes           String?
  createdBy       String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  // Relations
  shipment        Shipment      @relation(fields: [shipmentId], references: [id])
  user            User          @relation(fields: [createdBy], references: [id])

  @@map("customs")
}

// إدارة المستودعات
model Warehouse {
  id          String   @id @default(cuid())
  name        String
  location    String
  capacity    Decimal? @db.Decimal(10, 2)
  isActive    Boolean  @default(true)
  createdBy   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user        User     @relation(fields: [createdBy], references: [id])
  inventory   Inventory[]

  @@map("warehouses")
}

// إدارة المخزون
model Inventory {
  id          String   @id @default(cuid())
  warehouseId String
  itemName    String
  quantity    Int
  unitPrice   Decimal  @db.Decimal(10, 2)
  minQuantity Int      @default(0)
  maxQuantity Int?
  createdBy   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  warehouse   Warehouse @relation(fields: [warehouseId], references: [id])
  user        User      @relation(fields: [createdBy], references: [id])

  @@map("inventory")
}

// إدارة المركبات
model Vehicle {
  id          String   @id @default(cuid())
  plateNumber String   @unique
  model       String
  capacity    Decimal? @db.Decimal(10, 2)
  status      VehicleStatus @default(ACTIVE)
  createdBy   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user        User     @relation(fields: [createdBy], references: [id])

  @@map("vehicles")
}

// إدارة المعدات
model Equipment {
  id          String   @id @default(cuid())
  name        String
  type        String
  status      EquipmentStatus @default(ACTIVE)
  location    String?
  createdBy   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user        User     @relation(fields: [createdBy], references: [id])

  @@map("equipment")
}

// إدارة التذاكر والدعم
model Ticket {
  id          String      @id @default(cuid())
  title       String
  description String
  status      TicketStatus @default(OPEN)
  priority    Priority    @default(MEDIUM)
  category    String
  assignedTo  String?
  createdBy   String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relations
  assignee    User?       @relation("TicketAssignee", fields: [assignedTo], references: [id])
  creator     User        @relation("TicketCreator", fields: [createdBy], references: [id])

  @@map("tickets")
}

// إدارة الرسائل
model Message {
  id        String   @id @default(cuid())
  fromId    String
  toId      String
  subject   String?
  content   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  // Relations
  from      User     @relation("MessageFrom", fields: [fromId], references: [id])
  to        User     @relation("MessageTo", fields: [toId], references: [id])

  @@map("messages")
}

// إدارة جهات الاتصال
model Contact {
  id          String   @id @default(cuid())
  name        String
  email       String?
  phone       String?
  company     String?
  position    String?
  notes       String?
  createdBy   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user        User     @relation(fields: [createdBy], references: [id])

  @@map("contacts")
}

// إدارة التسويات
model Settlement {
  id          String   @id @default(cuid())
  clientId    String
  amount      Decimal  @db.Decimal(10, 2)
  method      String
  reference   String?
  status      SettlementStatus @default(PENDING)
  settledAt   DateTime?
  createdBy   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  client      Client   @relation(fields: [clientId], references: [id])
  user        User     @relation(fields: [createdBy], references: [id])

  @@map("settlements")
}

// إدارة الخصومات
model Discount {
  id          String   @id @default(cuid())
  clientId    String
  type        DiscountType
  value       Decimal  @db.Decimal(10, 2)
  description String?
  isActive    Boolean  @default(true)
  createdBy   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  client      Client   @relation(fields: [clientId], references: [id])
  user        User     @relation(fields: [createdBy], references: [id])

  @@map("discounts")
}

// إدارة التقييمات
model Evaluation {
  id          String   @id @default(cuid())
  employeeId  String
  evaluatorId String
  score       Int
  comments    String?
  evaluationDate DateTime
  createdBy   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  employee    Employee @relation(fields: [employeeId], references: [id])
  evaluator   User     @relation("EvaluationEvaluator", fields: [evaluatorId], references: [id])
  creator     User     @relation("EvaluationCreator", fields: [createdBy], references: [id])

  @@map("evaluations")
}

// إدارة الأهداف
model Goal {
  id          String   @id @default(cuid())
  employeeId  String
  title       String
  description String?
  target      String
  progress    Int      @default(0)
  dueDate     DateTime?
  status      GoalStatus @default(ACTIVE)
  createdBy   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  employee    Employee @relation(fields: [employeeId], references: [id])
  user        User     @relation(fields: [createdBy], references: [id])

  @@map("goals")
}

// إدارة الإعدادات
model SystemSettings {
  id          String   @id @default(cuid())
  key         String   @unique
  value       String
  description String?
  createdBy   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user        User     @relation(fields: [createdBy], references: [id])

  @@map("system_settings")
}

// ===== الإعلانات =====
model Advertisement {
  id          String            @id @default(cuid())
  title       String
  description String?
  content     String
  imageUrl    String?
  linkUrl     String?
  type        AdvertisementType @default(BANNER)
  status      AdvertisementStatus @default(DRAFT)
  priority    Int               @default(0)
  startDate   DateTime?
  endDate     DateTime?
  targetRole  Role?
  createdBy   String
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  // Relations
  creator     User              @relation(fields: [createdBy], references: [id])

  @@map("advertisements")
}

// ===== سجلات الأمان والتنبيهات والتقارير =====
model SecurityLog {
  id          String   @id @default(cuid())
  userId      String
  action      String
  ipAddress   String?
  userAgent   String?
  details     String?
  createdAt   DateTime @default(now())

  // Relations
  user        User     @relation(fields: [userId], references: [id])

  @@map("security_logs")
}

// إدارة التنبيهات
model Alert {
  id          String    @id @default(cuid())
  title       String
  message     String
  type        AlertType
  isRead      Boolean   @default(false)
  userId      String?
  createdAt   DateTime  @default(now())

  // Relations
  user        User?     @relation(fields: [userId], references: [id])

  @@map("alerts")
}

// إدارة التقارير
model Report {
  id          String   @id @default(cuid())
  title       String
  type        ReportType
  parameters  String?  // JSON
  generatedAt DateTime @default(now())
  createdBy   String
  createdAt   DateTime @default(now())

  // Relations
  user        User     @relation(fields: [createdBy], references: [id])

  @@map("reports")
}

// Enums
enum UserRole {
  ADMIN
  MANAGER
  USER
  CLIENT
}

enum ShipmentStatus {
  PENDING
  IN_TRANSIT
  DELIVERED
  CANCELLED
  RETURNED
}

enum InvoiceStatus {
  PENDING
  PAID
  OVERDUE
  CANCELLED
  PARTIAL
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
  REFUNDED
}

enum PaymentMethod {
  CASH
  BANK_TRANSFER
  CREDIT_CARD
  CHECK
  DIGITAL_WALLET
}

enum PurchaseOrderStatus {
  PENDING
  APPROVED
  ORDERED
  RECEIVED
  CANCELLED
}

enum AssetStatus {
  ACTIVE
  INACTIVE
  SOLD
  DISPOSED
}

// ===== التعدادات الجديدة للوظائف الناقصة =====

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
  ON_HOLD
}

enum ProjectStatus {
  ACTIVE
  COMPLETED
  CANCELLED
  ON_HOLD
}

enum CustomsStatus {
  PENDING
  IN_PROGRESS
  CLEARED
  REJECTED
  ON_HOLD
}

enum VehicleStatus {
  ACTIVE
  MAINTENANCE
  OUT_OF_SERVICE
  RETIRED
}

enum EquipmentStatus {
  ACTIVE
  MAINTENANCE
  OUT_OF_SERVICE
  RETIRED
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
  CANCELLED
}

enum SettlementStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
}

enum DiscountType {
  PERCENTAGE
  FIXED_AMOUNT
  FREE_SHIPPING
  SPECIAL_OFFER
}

enum GoalStatus {
  ACTIVE
  COMPLETED
  CANCELLED
  ON_HOLD
}

enum AlertType {
  INFO
  WARNING
  ERROR
  SUCCESS
}

enum ReportType {
  SALES
  SHIPPING
  FINANCIAL
  OPERATIONAL
  CUSTOMER
  EMPLOYEE
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
} 

// ===== الإعلانات (Enums) =====
enum AdvertisementType {
  BANNER
  POPUP
  SLIDER
  ANNOUNCEMENT
}

enum AdvertisementStatus {
  DRAFT
  ACTIVE
  INACTIVE
  EXPIRED
}

// ===== سجل التدقيق (Audit Trail) =====
enum AuditAction {
  CREATE
  UPDATE
  DELETE
}

enum AuditEntityType {
  INVOICE
  PAYMENT
  JOURNAL_ENTRY
  JOURNAL_ENTRY_LINE
  GL_ACCOUNT
  CLIENT
  SUPPLIER
  USER
  CURRENCY
}

model AuditLog {
  id         String          @id @default(cuid())
  entityType AuditEntityType
  entityId   String
  action     AuditAction
  changes    Json?
  summary    String?
  userId     String?
  ipAddress  String?
  userAgent  String?
  createdAt  DateTime        @default(now())

  // Relations
  user       User?           @relation(fields: [userId], references: [id])

  @@index([entityType, entityId])
  @@index([action])
  @@index([createdAt])
  @@map("audit_logs")
}

// ===== نظام الموافقات (Approvals) =====
enum ApprovalStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELLED
}

enum ApprovalOutcome {
  APPROVED
  REJECTED
}

enum ApprovalEntityType {
  INVOICE
  PAYMENT
  JOURNAL_ENTRY
}

model ApprovalRequest {
  id           String             @id @default(cuid())
  entityType   ApprovalEntityType
  entityId     String
  amount       Decimal            @db.Decimal(15, 2)
  status       ApprovalStatus     @default(PENDING)
  reason       String?
  requestedBy  String
  approverRole String?            // اختياري: دور الجهة المعتمدة
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt

  // Relations
  requester    User               @relation(fields: [requestedBy], references: [id])
  actions      ApprovalAction[]

  @@index([entityType, entityId])
  @@index([status])
  @@map("approval_requests")
}

model ApprovalAction {
  id          String           @id @default(cuid())
  requestId   String
  actorId     String
  outcome     ApprovalOutcome
  comment     String?
  createdAt   DateTime         @default(now())

  // Relations
  request     ApprovalRequest  @relation(fields: [requestId], references: [id], onDelete: Cascade)
  actor       User             @relation(fields: [actorId], references: [id])

  @@index([requestId])
  @@map("approval_actions")
}

// ===== نظام التكامل (Integrations) =====
enum IntegrationType {
  BANKING
  SHIPPING
  ACCOUNTING
  CRM
  ERP
  CUSTOM
}

enum IntegrationStatus {
  ACTIVE
  INACTIVE
  ERROR
  CONNECTING
}

model Integration {
  id          String           @id @default(cuid())
  name        String
  type        IntegrationType
  status      IntegrationStatus @default(INACTIVE)
  config      Json?            // إعدادات التكامل
  apiKey      String?          // مفتاح API (مشفر)
  apiSecret   String?          // سر API (مشفر)
  endpoint    String?          // نقطة النهاية
  isActive    Boolean          @default(true)
  lastSync    DateTime?        // آخر مزامنة
  errorCount  Int              @default(0)
  lastError   String?          // آخر خطأ
  createdBy   String
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  // Relations
  user        User             @relation(fields: [createdBy], references: [id])

  @@index([type])
  @@index([status])
  @@map("integrations")
}

// ===== نظام الأدوار والصلاحيات (Roles & Permissions) =====
enum PermissionCategory {
  USER_MANAGEMENT
  SHIPMENT_MANAGEMENT
  FINANCIAL_MANAGEMENT
  INVENTORY_MANAGEMENT
  REPORTING
  SYSTEM_ADMIN
  CUSTOM
}

model Permission {
  id          String             @id @default(cuid())
  name        String
  description String?
  category    PermissionCategory
  action      String             // مثل: CREATE, READ, UPDATE, DELETE
  resource    String             // مثل: USER, SHIPMENT, INVOICE
  isActive    Boolean            @default(true)
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt

  // Relations
  roles       RolePermission[]

  @@unique([action, resource])
  @@index([category])
  @@map("permissions")
}

model Role {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  isActive    Boolean  @default(true)
  isSystem    Boolean  @default(false) // الأدوار النظامية لا يمكن حذفها
  createdBy   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user        User     @relation(fields: [createdBy], references: [id])
  permissions RolePermission[]

  @@index([name])
  @@map("roles")
}

model RolePermission {
  id           String     @id @default(cuid())
  roleId       String
  permissionId String
  granted      Boolean    @default(true)
  grantedBy    String
  grantedAt    DateTime   @default(now())

  // Relations
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  user         User       @relation(fields: [grantedBy], references: [id])

  @@unique([roleId, permissionId])
  @@map("role_permissions")
}